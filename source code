import RPi.GPIO as gpio
from time import sleep
from firebase import firebase


firebase = firebase.FirebaseApplication("https://securitysipproject-default-rtdb.firebaseio.com/",None)
result = firebase.patch('/car_data/', {'sA1':'F','sA2':'O','sA3' : 'F', 'sA4' : 'F', 'sA5' : 'F' , 'sA6' : 'F'})



gpio.setmode(gpio.BOARD)
gpio.setup(3, gpio.IN)
while True:
    information = firebase.get('/car_data/sA1',None)
    print(information)
    #val = gpio.input(3)
    #print(val)
    #if val==1:
     #   print('ok')
    #else:
      #  print('NA')


import cv2
import imutils
import numpy as np
import pytesseract
from PIL import Image
from picamera.array import PiRGBArray
from picamera import PiCamera
import smtplib
import RPi.GPIO as gpio
gpio.setmode(gpio.BOARD)
gpio.setup(3, gpio.IN)
gpio.setup(5, gpio.IN)
gpio.setup(7, gpio.IN)
gpio.setup(11, gpio.IN)
gpio.setup(13, gpio.IN)

#server=smtplib.SMTP('smtp.gmail.com',587)
#server.starttls()
#server.login("yeswanth.190398@gmail.com", "29sony2000")
camera = PiCamera()
camera.resolution = (640, 480)
camera.framerate = 30
rawCapture = PiRGBArray(camera, size=(640, 480))
for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
    #
    image = frame.array
    cv2.imshow("Frame", image)
    key = cv2.waitKey(1) & 0xFF
    rawCapture.truncate(0)
    val_slot_1 = gpio.input(3)
    val_slot_2 = gpio.input(5)
    val_slot_3 = gpio.input(7)
    val_slot_4 = gpio.input(11)
    val_slot_5 = gpio.input(13)
    if val_slot_1 == 0:
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) #convert to grey scale
        gray = cv2.bilateralFilter(gray, 11, 17, 17) #Blur to reduce noise
        edged = cv2.Canny(gray, 30, 200) #Perform Edge detection
        cnts = cv2.findContours(edged.copy(), cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
        cnts = imutils.grab_contours(cnts)
        cnts = sorted(cnts, key = cv2.contourArea, reverse = True)[:10]
        screenCnt = None
        for c in cnts:
            peri = cv2.arcLength(c, True)
            approx = cv2.approxPolyDP(c, 0.018 * peri, True)
            if len(approx) == 4:
                screenCnt = approx
                break
        if screenCnt is None:
            detected = 0
            print ("No contour detected")
        else:
            detected = 1
        if detected == 1:
            cv2.drawContours(image, [screenCnt], -1, (0, 255, 0), 3)
            #cv2.drawContours(image, [screenCnt], -1, (0, 255, 0), 3)
            mask = np.zeros(gray.shape,np.uint8)
            new_image = cv2.drawContours(mask,[screenCnt],0,255,-1,)
            new_image = cv2.bitwise_and(image,image,mask=mask)
            (x, y) = np.where(mask == 255)
            (topx, topy) = (np.min(x), np.min(y))
            (bottomx, bottomy) = (np.max(x), np.max(y))
            Cropped = gray[topx:bottomx+1, topy:bottomy+1]
            text = pytesseract.image_to_string(Cropped, config='--psm 11')
            print("Detected Number is:",text)
 #            server.sendmail("Sender's Email ID@gmail.com","Sender's Email ID@gmail.com",text)
            cv2.imshow("Frame", image)
            cv2.imshow('Cropped',Cropped)
            if val_slot_2==1:
                cv2.waitKey(0)
            #break
GPIO.cleanup()
cv2.destroyAllWindows()


import cv2
import imutils
import numpy as np
import pytesseract
from PIL import Image
from picamera.array import PiRGBArray
from picamera import PiCamera
import smtplib
server=smtplib.SMTP('smtp.gmail.com',587)
server.starttls()
server.login("Your Email ID", "Email ID Password")
camera = PiCamera()
camera.resolution = (640, 480)
camera.framerate = 30
rawCapture = PiRGBArray(camera, size=(640, 480))
for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
        image = frame.array
        cv2.imshow("Frame", image)
        key = cv2.waitKey(1) & 0xFF
        rawCapture.truncate(0)
        if key == ord("s"):
             gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) #convert to grey scale
             gray = cv2.bilateralFilter(gray, 11, 17, 17) #Blur to reduce noise
             edged = cv2.Canny(gray, 30, 200) #Perform Edge detection
             cnts = cv2.findContours(edged.copy(), cv2.RETR_TREE,              cv2.CHAIN_APPROX_SIMPLE)
             cnts = imutils.grab_contours(cnts)
             cnts = sorted(cnts, key = cv2.contourArea, reverse = True)[:10]
             screenCnt = None
             for c in cnts:
                peri = cv2.arcLength(c, True)
                approx = cv2.approxPolyDP(c, 0.018 * peri, True)
                if len(approx) == 4:
                  screenCnt = approx
                  break
             if screenCnt is None:
               detected = 0
               print ("No contour detected")
             else:
               detected = 1
             if detected == 1:
               cv2.drawContours(image, [screenCnt], -1, (0, 255, 0), 3)
             mask = np.zeros(gray.shape,np.uint8)
             new_image = cv2.drawContours(mask,[screenCnt],0,255,-1,)
             new_image = cv2.bitwise_and(image,image,mask=mask)
             (x, y) = np.where(mask == 255)
             (topx, topy) = (np.min(x), np.min(y))
             (bottomx, bottomy) = (np.max(x), np.max(y))
             Cropped = gray[topx:bottomx+1, topy:bottomy+1]
             text = pytesseract.image_to_string(Cropped, config='--psm 11')
             print("Detected Number is:",text)
             server.sendmail("Sender's Email ID@gmail.com","Sender's Email ID@gmail.com",text)
             cv2.imshow("Frame", image)
             cv2.imshow('Cropped',Cropped)
             cv2.waitKey(0)
             break
cv2.destroyAllWindows()
